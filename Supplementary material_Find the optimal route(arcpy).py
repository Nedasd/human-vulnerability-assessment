#!/usr/bin/python
# -*- coding: UTF-8 -*-
# this code is designed for finding the optimal escape route.

import arcpy,os
import math,random
from arcpy import env

arcpy.env.overwriteOutput = True

origin_shp="E:/#ned/optimal2/escape4_step0.shp"# take a empty shp to mark the point
arcpy.AddField_management(origin_shp, "mark", "DOUBLE", 18, 11)
add_cursor = arcpy.UpdateCursor(origin_shp)
i=0
for add_row in add_cursor:
    add_row.getValue("mark")
    add_row.setValue("mark", str(i+1))

    add_cursor.updateRow(add_row)
    i += 1

try:
    make_path_merge = "E:\\#ned\\optimal\\merge\\"
    os.mkdir(make_path_merge)

    make_path_merge = "E:\\#ned\\optimal\\#step\\"
    os.mkdir(make_path_merge)
except:
    print("folder merge already exists")

for cal_number in range (1,5):
    origin_shp="E:/#ned/optimal/escape"+str(cal_number)+"_step0.shp"
    arcpy.CopyFeatures_management("E:/#ned/optimal/mark_shp.shp","E:/#ned/optimal/merge/external"+str(cal_number)+"_step0.shp")
    arcpy.CopyFeatures_management(origin_shp, "E:/#ned/optimal/#step/escape"+str(cal_number)+"_step0.shp")
# just find every potential route, then run Logical operating
time_step = 0
while time_step < 100:
    time_step = time_step + 1
    # Loop operation
    for cal_case in range (1,5):
        # copy the origin_shp, at this time the internal point is still exist
        from_copy_shp = "E:/#ned/optimal/#step/escape"+str(cal_case)+"_step"+str(time_step-1)+".shp"
        calculate_shp = "E:/#ned/optimal/#step/escape"+str(cal_case)+"_step"+str(time_step)+".shp"
        arcpy.CopyFeatures_management(from_copy_shp, calculate_shp)

        find_mark_number=0
        destroy_box = []
        while find_mark_number < 4:
            find_mark_number = find_mark_number + 1
            mark_shp = "E:/#ned/optimal/merge/external"+str(find_mark_number)+"_step"+str(time_step-1)+".shp"
            mark_Cursor = arcpy.da.UpdateCursor(mark_shp, ["mark"])
            for destroy_mark in mark_Cursor:
                destroy_box.append(destroy_mark)

        set_destroy_box=set()
        for item in destroy_box:
            for i in item:
                set_destroy_box.add(i)
        counter_repeat=Counter(set_destroy_box)
        f = open("E:/#ned/counter_repeat.txt", 'a')
        f.write(str(destroy_box) + "\n")
        f.close()
        # delete the external point, that is the destroyed people
        arcpy.env.workspace = "E:/#ned/optimal/merge"
        delete_Cursor = arcpy.da.UpdateCursor(calculate_shp, ["mark"])
        try:
            for row in delete_Cursor:
                if row in destroy_box:
                    delete_Cursor.deleteRow()
        except:
            print("none destroyed people")
        del destroy_box[:]

        move_angle = math.pi / 180
        # calculate the escape A
        if cal_case ==1:
            Cal_Cursor = arcpy.da.UpdateCursor(calculate_shp, ["shape@X", "shape@Y", "angle"])
            for row in Cal_Cursor:
                if row[2] < 0:  # -74=-90+16
                    row[0] = row[0] - math.cos(16 * move_angle) * (1)
                    row[1] = row[1] + math.sin(16 * move_angle) * (1)
                    Cal_Cursor.updateRow(row)
                elif row[2] > 0:  # 106=90+19
                    row[0] = row[0] + math.cos(16 * move_angle) * (1)
                    row[1] = row[1] - math.sin(16 * move_angle) * (1)
                    Cal_Cursor.updateRow(row)
                arcpy.RefreshActiveView()
        elif cal_case==2:
            Cal_Cursor = arcpy.da.UpdateCursor(calculate_shp, ["shape@X", "shape@Y", "angle"])
            for row in Cal_Cursor:
                if row[2] < 0:  # -119=-74-45
                    row[0] = row[0] - math.cos(29 * move_angle) * (1)
                    row[1] = row[1] - math.sin(29 * move_angle) * (1)
                    Cal_Cursor.updateRow(row)
                elif row[2] > 0:  # 151=90+16+45
                    row[0] = row[0] + math.cos(61 * move_angle) * (1)
                    row[1] = row[1] - math.sin(61 * move_angle) * (1)
                    Cal_Cursor.updateRow(row)
                arcpy.RefreshActiveView()
        elif cal_case==3:
            Cal_Cursor = arcpy.da.UpdateCursor(calculate_shp, ["shape@X", "shape@Y"])
            for row in Cal_Cursor:  # -164=-90-74
                row[0] = row[0] - math.cos(74 * move_angle) * (1)
                row[1] = row[1] - math.sin(74 * move_angle) * (1)
                Cal_Cursor.updateRow(row)
                arcpy.RefreshActiveView()
        elif cal_case==4:
            Cal_Cursor = arcpy.da.UpdateCursor(calculate_shp, ["shape@X", "shape@Y", "angle", "run_step"])
            for row in Cal_Cursor:
                if time_step <= row[3]:  # execution route A
                    # to run A left
                    if row[2] < 0:  # -74=-90+16
                        row[0] = row[0] - math.cos(16 * move_angle) * (1)
                        row[1] = row[1] + math.sin(16 * move_angle) * (1)
                    # to run A right
                    elif row[2] > 0:  # 106=90+19
                        row[0] = row[0] + math.cos(16 * move_angle) * (1)
                        row[1] = row[1] - math.sin(16 * move_angle) * (1)
                else:  # execution route B
                    # to run B left
                    if row[2] < 0:  # -119=-74-45
                        row[0] = row[0] - math.cos(29 * move_angle) * (1)
                        row[1] = row[1] - math.sin(29 * move_angle) * (1)
                    # to run B right
                    elif row[2] > 0:  # 151=90+16+45
                        row[0] = row[0] + math.cos(61 * move_angle) * (1)
                        row[1] = row[1] - math.sin(61 * move_angle) * (1)
                Cal_Cursor.updateRow(row)
                arcpy.RefreshActiveView()
        else:
            print("Error calculating coordinates")

        # select the internal and external point
        cut_shp = "E:/#ned/optimal/boundary.shp"
        internal_shp = "E:/#ned/optimal/merge/internal"+str(cal_case)+"_step"+str(time_step)+".shp"
        external_shp = "E:/#ned/optimal/merge/external"+str(cal_case)+"_step"+str(time_step)+".shp"
        try:
            arcpy.Clip_analysis(calculate_shp, cut_shp, internal_shp, "0.01 Meters")
            arcpy.SymDiff_analysis(calculate_shp, internal_shp, external_shp, "ALL", 0.001)
            arcpy.DeleteField_management(external_shp,
                                         ["CID_1", "mark_1", "distance_1", "FID_intern", "FID_step_" + str(time_step)])
        except:
            print("It did not intersect")

         # statistic the survival human number
        field = "CID"
        cursor = arcpy.SearchCursor(external_shp)
        internal_row = cursor.next()
        # here take the "CID=0" as the common characteristics
        count_number = 0
        while internal_row:
            distance_number = internal_row.getValue(field)
            if distance_number == 0:
                count_number = count_number + 1
            else:
                print("Check the" + str(time_step) + " external_shp field")
            internal_row = cursor.next()
        print("step_" + str(time_step) + " survivors number:" + str(count_number))
        # write the number of survivors
        txt_name="E:/#ned/optimal/survival_number_"+str(cal_case)+".txt"
        f = open(txt_name, 'a')
        f.write("cal"+str(cal_case)+"step_" + str(time_step) + " Survivors number:" + str(count_number) + "\n")
        f.close()



# Perform logical operations to find the optimal route
arcpy.env.workspace = "E:/#ned/optimal/merge/"

box_A=[]
box_B=[]
box_C=[]
box_D=[]
box_I=[]

mark_number=0
while mark_number<100:
    mark_number=mark_number+1

    mark_shp_A = "external1_step"+str(mark_number) + ".shp"
    mark_Cursor_A = arcpy.da.UpdateCursor(mark_shp_A, ["mark"])
    for destroy_mark in mark_Cursor_A:
        box_A.append(destroy_mark)

    set_A = set()
    for item in box_A:
        for i in item:
            set_A.add(i)

    mark_shp_B = "external2_step"+str(mark_number) + ".shp"
    mark_Cursor_B = arcpy.da.UpdateCursor(mark_shp_B, ["mark"])
    for destroy_mark in mark_Cursor_B:
        box_B.append(destroy_mark)

    set_B = set()
    for item in box_B:
        for i in item:
            set_B.add(i)

    mark_shp_C = "external3_step"+str(mark_number) + ".shp"
    mark_Cursor_C = arcpy.da.UpdateCursor(mark_shp_C, ["mark"])
    for destroy_mark in mark_Cursor_C:
        box_C.append(destroy_mark)

    set_C = set()
    for item in box_C:
        for i in item:
            set_C.add(i)

    mark_shp_D = "external4_step"+str(mark_number) + ".shp"
    mark_Cursor_D = arcpy.da.UpdateCursor(mark_shp_D, ["mark"])
    for destroy_mark in mark_Cursor_D:
        box_D.append(destroy_mark)

    set_D = set()
    for item in box_D:
        for i in item:
            set_D.add(i)

    # the following is Four Route
    box_I=list(set_A & set_B & set_C & set_D)

    # the following is No route
    # remember the #external# should be replace by #external,
    # and only consider mark_number=100
    #box_I=list(set_A & set_B & set_C & set_D)

    # the following is Only One route
    #box_E=list(set_A.union(set_B).union(set_C))
    #box_I=list(set_D-set(box_E))# eg. only route A

    # the following is Two Route
    #box_E=list(set_A.union(set_B))# eg. route A & B
    #box_G=list(set_C & set_D)
    #box_I=list(set(box_G)-set(box_E))

    # the following is Three Route
    #box_E=list(set_D & set_A & set_B)# eg. route A & B & C
    #box_I = list(set(box_E)-set_C)

print(box_I)
for x in box_I:
    f = open("E:/#ned/optimal/optimal_route/A+B+D.txt", 'a')
    f.write(str(x) + "\n")
    f.close()
try:
    del box_I[:]
except:
    print("step" + str(mark_number))

# output the point number and draw the figure
arcpy.env.workspace = "E:/#ned/optimal"
arcpy.env.overwriteOutput = True

result = []
fd = file("E:/#ned/optimal/optimal_route/merge A.txt", "r")

for line in fd.readlines():
    result.append(list(line.strip('\n').split(',')))

destroy_box=[]
for item in result:
    for it in item:
        destroy_box.append(float(it))

calculate_shp="E:/#ned/optimal/permutation_combination_16/merge A.shp"
arcpy.CopyFeatures_management("E:/#ned/optimal/escape1_step0.shp", calculate_shp)

delete_Cursor = arcpy.da.UpdateCursor(calculate_shp, ["mark"])
for row in delete_Cursor:
    if row[0] not in destroy_box:
        delete_Cursor.deleteRow()